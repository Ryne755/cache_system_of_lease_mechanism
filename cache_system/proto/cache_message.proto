syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.CacheMessageProto";
option java_outer_classname = "CacheMessageProto";
option objc_class_prefix = "RTG";

option cc_enable_arenas = true;

package CacheMessageProto;

enum CacheMessageType{
	kDummyType=0;
	//cache client ---> cache server
	kReadRequest=0x1001;
	//cache client <--- cache server
	kReadResponse=0x1002;
	//cache client ---> cache server
	kUpdateRequest=0x1003;
	//cache client <--- cache server
	kUpdateResponse=0x1004;
	//cache client ---> cache server
	kOperationAck=0x1005;
	//cache client <--- cache server
	kInvalidateCache=0x1006;
};

message CacheMessageHeader
{
	//identify of protocol msg,fixed:0x34ec27d9
    uint32 magic=1;
	//protocol version
    uint32 version=2;
	//identify a message
    CacheMessageType type=3;
    //identity this operation ,generated by client
	uint64 op_id=4;
};

message CacheReadRequest
{
   uint64 timestamp=1;
   uint32 expire=2;
	//cache id
   uint32 cache_id=3;
};
message CacheUpdateRequest
{
	uint64 timestamp=1;
	uint32 expire=2;
	//cache id
	uint32 cache_id=3;
	bytes  cache_data=4;
};

message CacheOpResponse
{
	uint32 result=1;
	uint64 timestamp=2;
	uint32 expire=3;
	//cache id
	uint32 cache_id=4;
	bytes  cache_data=5;
};

// In proto3, singular is the default rule
message CacheMessage
{
    CacheMessageHeader header=1;
	CacheReadRequest   read_request=2;
	CacheUpdateRequest update_request=3;
	CacheOpResponse    op_response=4;
	//kOperationAck and kInvalidateCache just have a common header
};

// Interface exported by the server.
service CacheService {
	rpc CacheRequest(CacheMessage) returns (CacheMessage) {}
}
